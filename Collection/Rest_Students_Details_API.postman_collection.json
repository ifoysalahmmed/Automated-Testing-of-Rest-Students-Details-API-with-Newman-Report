{
	"info": {
		"_postman_id": "6cd0c096-3e60-4f69-ac78-0e807ea58cc0",
		"name": "Rest_Students_Details_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34581549"
	},
	"item": [
		{
			"name": "Get All Students Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Verifying Number of Students is Equal to 100\", function () {\r",
							"            var jsonData = pm.response.json();\r",
							"            pm.expect(jsonData).to.be.an('array');\r",
							"            var responseLength = jsonData.length;\r",
							"            pm.expect(responseLength).to.eql(100);\r",
							"\r",
							"            pm.test(\"Total Students: \" + jsonData.length);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create A Student Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.environment.set(\"StudentID\", jsonData.id);\r",
							"\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.environment.set(\"FirstName\", firstName);\r",
							"\r",
							"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"\r",
							"var middleName = firstName + lastName;\r",
							"pm.environment.set(\"MiddleName\", middleName);\r",
							"\r",
							"pm.environment.set(\"LastName\", lastName);\r",
							"\r",
							"var year = Math.floor(Math.random() * (2050 - 1980 + 1)) + 1980;\r",
							"var month = Math.floor(Math.random() * 12) + 1;\r",
							"month = (month < 10) ? '0' + month : month;\r",
							"var day = Math.floor(Math.random() * 28) + 1;\r",
							"day = (day < 10) ? '0' + day : day;\r",
							"var dateOfBirth = day + '/' + month + '/' + year;\r",
							"pm.environment.set(\"DateOfBirth\", dateOfBirth);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"{{FirstName}}\",\r\n    \"middle_name\": \"{{MiddleName}}\",\r\n    \"last_name\": \"{{LastName}}\",\r\n    \"date_of_birth\": \"{{DateOfBirth}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Created Student Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Student ID\", function(){\r",
							"            pm.expect(pm.environment.get(\"StudentID\")).to.eql(jsonData.data.id);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating First Name\", function(){\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.data.first_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Middle Name\", function(){\r",
							"            pm.expect(pm.environment.get(\"MiddleName\")).to.eql(jsonData.data.middle_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Last Name\", function(){\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.data.last_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Date Of Birth\", function(){\r",
							"            pm.expect(pm.environment.get(\"DateOfBirth\")).to.eql(jsonData.data.date_of_birth);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.environment.set(\"FirstName\", firstName);\r",
							"\r",
							"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"\r",
							"var middleName = firstName + lastName;\r",
							"pm.environment.set(\"MiddleName\", middleName);\r",
							"\r",
							"pm.environment.set(\"LastName\", lastName);\r",
							"\r",
							"var year = Math.floor(Math.random() * (2050 - 1980 + 1)) + 1980;\r",
							"var month = Math.floor(Math.random() * 12) + 1;\r",
							"month = (month < 10) ? '0' + month : month;\r",
							"var day = Math.floor(Math.random() * 28) + 1;\r",
							"day = (day < 10) ? '0' + day : day;\r",
							"var dateOfBirth = day + '/' + month + '/' + year;\r",
							"pm.environment.set(\"DateOfBirth\", dateOfBirth);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Information Update Status\", function () {\r",
							"            pm.expect(\"true\").to.eql(jsonData.status);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Information Update Message\", function () {\r",
							"            pm.expect(\"update  data success\").to.eql(jsonData.msg);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{StudentID}},\r\n  \"first_name\": \"{{FirstName}}\",\r\n  \"middle_name\": \"{{MiddleName}}\",\r\n  \"last_name\": \"{{LastName}}\",\r\n  \"date_of_birth\": \"{{DateOfBirth}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After The Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Student ID\", function () {\r",
							"            pm.expect(pm.environment.get(\"StudentID\")).to.eql(jsonData.data.id);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.data.first_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Middle Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"MiddleName\")).to.eql(jsonData.data.middle_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.data.last_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Date Of Birth\", function () {\r",
							"            pm.expect(pm.environment.get(\"DateOfBirth\")).to.eql(jsonData.data.date_of_birth);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Technical Skills Create Status\", function () {\r",
							"            pm.expect(\"true\").to.eql(jsonData.status);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Technical Skills Create Message\", function () {\r",
							"            pm.expect(\"Add  data success\").to.eql(jsonData.msg);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var languages = [\r",
							"    \"Java\", \"Python\", \"JavaScript\", \"C++\", \"Ruby\", \"Swift\",\r",
							"    \"Go\", \"Rust\", \"Scala\", \"Kotlin\", \"TypeScript\", \"PHP\",\r",
							"    \"Perl\", \"Haskell\", \"Elixir\", \"Clojure\", \"Objective-C\",\r",
							"    \"Dart\", \"Lua\", \"F#\", \"Shell\", \"R\", \"MATLAB\", \"Groovy\",\r",
							"    \"Visual Basic\", \"Ada\", \"Fortran\", \"Pascal\", \"Assembly\"\r",
							"];\r",
							"\r",
							"var randomIndex1 = Math.floor(Math.random() * languages.length);\r",
							"var randomLanguage1 = languages[randomIndex1];\r",
							"pm.environment.set(\"Language1\", randomLanguage1);\r",
							"\r",
							"var randomIndex2;\r",
							"do {\r",
							"    randomIndex2 = Math.floor(Math.random() * languages.length);\r",
							"} while (randomIndex2 === randomIndex1);\r",
							"\r",
							"var randomLanguage2 = languages[randomIndex2];\r",
							"pm.environment.set(\"Language2\", randomLanguage2);\r",
							"\r",
							"\r",
							"var randomNumber = Math.floor(Math.random() * 10);\r",
							"var randomYearExp = randomNumber + ' ' + 'year';\r",
							"pm.environment.set(\"YearExp\", randomYearExp);\r",
							"\r",
							"var randomUsedNumber = Math.floor(Math.random() * 2);\r",
							"var randomLastUsed = randomUsedNumber === 0 ? \"Recent\" : \"1 year\";\r",
							"pm.environment.set(\"LastUsed\", randomLastUsed);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"language\": [\r\n        \"{{Language1}}\",\r\n        \"{{Language2}}\"\r\n    ],\r\n    \"yearexp\": \"{{YearExp}}\",\r\n    \"lastused\": \"{{LastUsed}}\",\r\n    \"st_id\": {{StudentID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/technicalskills",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Address Create Status\", function () {\r",
							"            pm.expect(\"true\").to.eql(jsonData.status);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Address Create Message\", function () {\r",
							"            pm.expect(\"Add  data success\").to.eql(jsonData.msg);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var houseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"HouseNumber\", houseNumber);\r",
							"\r",
							"var city = pm.variables.replaceIn(\"{{$randomCity}}\");\r",
							"pm.environment.set(\"City\", city);\r",
							"\r",
							"var state = pm.variables.replaceIn(\"{{$randomCity}}\");\r",
							"pm.environment.set(\"State\", state);\r",
							"\r",
							"var country = pm.variables.replaceIn(\"{{$randomCountry}}\");\r",
							"pm.environment.set(\"Country\", country);\r",
							"\r",
							"var std_Code1 = pm.variables.replaceIn(\"{{$randomCreditCardMask}}\");\r",
							"pm.environment.set(\"Std_Code1\", std_Code1);\r",
							"\r",
							"var std_Code2 = pm.variables.replaceIn(\"{{$randomCreditCardMask}}\");\r",
							"pm.environment.set(\"Std_Code2\", std_Code2);\r",
							"\r",
							"var home1 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"pm.environment.set(\"Home1\", home1);\r",
							"\r",
							"var home2 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"pm.environment.set(\"Home2\", home2);\r",
							"\r",
							"var mobile1 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"pm.environment.set(\"Mobile1\", mobile1);\r",
							"\r",
							"var mobile2 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"pm.environment.set(\"Mobile2\", mobile2);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Permanent_Address\": {\r\n        \"House_Number\": \"{{HouseNumber}}\",\r\n        \"City\": \"{{City}}\",\r\n        \"State\": \"{{City}}\",\r\n        \"Country\": \"{{Country}}\",\r\n        \"PhoneNumber\": [\r\n            {\r\n                \"Std_Code\": \"{{Std_Code1}}\",\r\n                \"Home\": \"{{Home1}}\",\r\n                \"Mobile\": \"{{Mobile1}}\"\r\n            },\r\n            {\r\n                \"Std_Code\": \"{{Std_Code2}}\",\r\n                \"Home\": \"{{Home2}}\",\r\n                \"Mobile\": \"{{Mobile2}}\"\r\n            }\r\n        ]\r\n    },\r\n    \"stId\": {{StudentID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/addresses",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Student Full Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\r",
							"            \"OK: This status code indicates that the request was successful, and the server returned the requested data.\",\r",
							"            function () {\r",
							"                pm.response.to.have.status(200);\r",
							"            }\r",
							"        );\r",
							"\r",
							"        pm.test(\"Validating Student ID\", function () {\r",
							"            pm.expect(pm.environment.get(\"StudentID\")).to.eql(\r",
							"                parseInt(jsonData.data.TechnicalDetails[0].st_id)\r",
							"            );\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(\r",
							"                jsonData.data.first_name\r",
							"            );\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Middle Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"MiddleName\")).to.eql(\r",
							"                jsonData.data.middle_name\r",
							"            );\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.data.last_name);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Date Of Birth\", function () {\r",
							"            pm.expect(pm.environment.get(\"DateOfBirth\")).to.eql(\r",
							"                jsonData.data.date_of_birth\r",
							"            );\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating Technical Details Length\", function () {\r",
							"            pm.expect(jsonData.data.TechnicalDetails).to.be.an(\"array\");\r",
							"            pm.expect(jsonData.data.TechnicalDetails.length).to.be.above(0);\r",
							"        });\r",
							"\r",
							"        for (i = 0; i < jsonData.data.TechnicalDetails.length; i++) {\r",
							"            if (jsonData.data.TechnicalDetails[i].language[0] == pm.environment.get(\"Language1\")) {\r",
							"                if (jsonData.data.TechnicalDetails[i].language[1] == pm.environment.get(\"Language2\")) {\r",
							"                    var t_address = jsonData.data.TechnicalDetails[i].id;\r",
							"\r",
							"                    pm.test(\"Validating First Programming Language: \" + pm.environment.get(\"Language1\"));\r",
							"                    pm.test(\"Validating Second Programming Language: \" + pm.environment.get(\"Language2\"));\r",
							"                }\r",
							"            }\r",
							"            if (jsonData.data.TechnicalDetails[i].id == t_address) {\r",
							"                if (jsonData.data.TechnicalDetails[i].yearexp == pm.environment.get(\"YearExp\")) {\r",
							"                    pm.test(\"Validating Year of Experience: \" + pm.environment.get(\"YearExp\"));\r",
							"                }\r",
							"                if (jsonData.data.TechnicalDetails[i].lastused == pm.environment.get(\"LastUsed\")) {\r",
							"                    pm.test(\"Validating Last Uses of Programming Languages: \" + pm.environment.get(\"LastUsed\"));\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"        pm.test(\"Validating Address Details Length\", function () {\r",
							"            pm.expect(jsonData.data.Address).to.be.an(\"array\");\r",
							"            pm.expect(jsonData.data.Address.length).to.be.above(0);\r",
							"        });\r",
							"\r",
							"        for (i = 0; i < jsonData.data.Address.length; i++) {\r",
							"            if (jsonData.data.Address[i].Permanent_Address.House_Number == pm.environment.get(\"HouseNumber\")) {\r",
							"                var detail = jsonData.data.Address[i].Permanent_Address;\r",
							"\r",
							"                pm.test(\"Validating House Number: \" + pm.environment.get(\"HouseNumber\"));\r",
							"\r",
							"                if (detail.City == pm.environment.get(\"City\")) {\r",
							"                    pm.test(\"Validating City Name: \" + pm.environment.get(\"City\"));\r",
							"                }\r",
							"\r",
							"                if (detail.State == pm.environment.get(\"State\")) {\r",
							"                    pm.test(\"Validating State Name: \" + pm.environment.get(\"State\"));\r",
							"                }\r",
							"\r",
							"                if (detail.Country == pm.environment.get(\"Country\")) {\r",
							"                    pm.test(\"Validating Country Name: \" + pm.environment.get(\"Country\"));\r",
							"                }\r",
							"\r",
							"                for (j = 0; j < detail.PhoneNumber.length; j++) {\r",
							"                    if (detail.PhoneNumber[j].Std_Code == pm.environment.get(\"Std_Code1\")) {\r",
							"                        pm.test(\"Validating First STD Code: \" + pm.environment.get(\"Std_Code1\"));\r",
							"                    }\r",
							"\r",
							"                    if (detail.PhoneNumber[j].Home == pm.environment.get(\"Home1\")) {\r",
							"                        pm.test(\"Validating First Home Number: \" + pm.environment.get(\"Home1\"));\r",
							"                    }\r",
							"\r",
							"                    if (detail.PhoneNumber[j].Mobile == pm.environment.get(\"Mobile1\")) {\r",
							"                        pm.test(\"Validating First Mobile Number: \" + pm.environment.get(\"Mobile1\"));\r",
							"                    }\r",
							"                }\r",
							"\r",
							"                for (k = 0; k < detail.PhoneNumber.length; k++) {\r",
							"                    if (detail.PhoneNumber[k].Std_Code == pm.environment.get(\"Std_Code2\")) {\r",
							"                        pm.test(\"Validating Second STD Code: \" + pm.environment.get(\"Std_Code2\"));\r",
							"                    }\r",
							"\r",
							"                    if (detail.PhoneNumber[k].Home == pm.environment.get(\"Home2\")) {\r",
							"                        pm.test(\"Validating Second Home Number: \" + pm.environment.get(\"Home2\"));\r",
							"                    }\r",
							"\r",
							"                    if (detail.PhoneNumber[k].Mobile == pm.environment.get(\"Mobile2\")) {\r",
							"                        pm.test(\"Validating Second Mobile Number: \" + pm.environment.get(\"Mobile2\"));\r",
							"                    }\r",
							"                }\r",
							"\r",
							"                pm.test(\"Validating Current Address Value 'null'\", function () {\r",
							"                    pm.expect(jsonData.data.Address[i].Current_Address).to.eql(null);\r",
							"                });\r",
							"            }\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/FinalStudentDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student Record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        if (jsonData.status == \"false\") {\r",
							"            pm.test(\"Student Details Already Deleted\")\r",
							"        }\r",
							"\r",
							"        if (jsonData.status == \"true\") {\r",
							"            pm.test(\"Validating Student Details Delete Status\", function () {\r",
							"                pm.expect(\"true\").to.eql(jsonData.status);\r",
							"            });\r",
							"\r",
							"            pm.test(\"Validating Student Details Delete Message\", function () {\r",
							"                pm.expect(\"Delete  data success\").to.eql(jsonData.msg);\r",
							"            });\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After The Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating After Delete Status\", function () {\r",
							"            pm.expect(\"false\").to.eql(jsonData.status);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating After Delete Message\", function () {\r",
							"            pm.expect(\"No File Found\").to.eql(jsonData.msg);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/FinalStudentDetails/{{StudentID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{StudentID}}"
					]
				}
			},
			"response": []
		}
	]
}